{"version":3,"sources":["prismic-configuration.js","pages/Help.js","pages/Preview.js","pages/NotFound.js","pages/Page.js","redux/post/action.js","redux/post/actionConst.js","pages/homePage.jsx","layout/nav.jsx","redux/nav/action.js","redux/nav/actionConst.js","App.js","redux/post/reducer.js","redux/nav/reducer.js","redux/index.js","index.js"],"names":["apiEndpoint","linkResolver","doc","type","uid","client","Prismic","accessToken","Header","repositoryInfo","className","src","alt","href","Navbar","url","name","repoLink","isConfigured","target","rel","BootstrapSection","id","CustomTypeSection","FirstPageSection","PageComponentSection","RouteSection","Help","match","replace","getRepositoryInfo","onLoad","document","querySelectorAll","forEach","block","window","hljs","highlightBlock","Preview","history","location","useEffect","params","qs","parse","search","slice","token","console","warn","previewSession","then","push","notFoundStyle","display","flexDirection","justifyContent","height","alignItems","NotFound","style","to","Page","useState","setDocData","notFound","toggleNotFound","a","getByUID","result","fetchData","textAlign","fontSize","fontStyle","padding","RichText","asText","data","title","image","render","description","fetchPostRequest","HomePage","dispatch","useDispatch","post","useSelector","state","posts","getSingle","res","log","payload","catch","error","fetchPostFailure","blogContent","body","map","index","slice_type","primary","rich_text","galleryContent","items","item","itemIndex","key","thumbnail","title1","publish_date","subtitle","content","title_of_section","slider","Nav","sideBarActive","setSideBarActive","handleToggleSideBar","useLocation","links","nav","selectedLink","linkDispatch","linksComponent","e","onClick","path","pathname","zIndex","withRouter","props","repoName","exec","routes","component","Helmet","async","defer","basename","process","exact","from","initialState","loading","PostReducer","action","icon","NavReducer","find","mainReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","getElementById"],"mappings":"iRAIaA,EAAc,4CAQdC,EAAe,SAACC,GAC3B,MAAiB,SAAbA,EAAIC,KAAuB,SAAN,OAAgBD,EAAIE,KACtC,KAIIC,E,OAASC,EAAQD,OAAOL,EAAa,CAAEO,YAVhC,K,yBCiCdC,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,eAAH,OACb,gCACE,kBAAC,EAAWA,GACZ,yBAAKC,UAAU,WACb,yBAAKC,IAAI,oBAAoBC,IAAI,KACjC,0DACA,qIAEF,yBAAKF,UAAU,eACf,yBAAKA,UAAU,aACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,SACb,4BACE,4BAAI,uBAAGG,KAAK,WAAU,0BAAMH,UAAU,UAAhB,KAAlB,yBAAyE,yBAAKC,IAAI,mBAAmBC,IAAI,OAC7G,4BAAI,uBAAGC,KAAK,gBAAe,0BAAMH,UAAU,UAAhB,KAAvB,6BAAkF,yBAAKC,IAAI,mBAAmBC,IAAI,OACtH,4BAAI,uBAAGC,KAAK,eAAc,0BAAMH,UAAU,UAAhB,KAAtB,yBAA6E,yBAAKC,IAAI,mBAAmBC,IAAI,OACjH,4BAAI,uBAAGC,KAAK,mBAAkB,0BAAMH,UAAU,UAAhB,KAA1B,4BAAoF,yBAAKC,IAAI,mBAAmBC,IAAI,OACxH,4BAAI,uBAAGC,KAAK,UAAS,0BAAMH,UAAU,UAAhB,KAAjB,yBAAwE,yBAAKC,IAAI,mBAAmBC,IAAI,SAGhH,yBAAKF,UAAU,YAMjBI,EAAS,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,IAAKC,EAAyB,EAAzBA,KACfC,EADwC,EAAnBC,aAGzB,uBAAGL,KAAME,EAAKI,OAAO,SAASC,IAAI,uBAAsB,yCAAeJ,IACvE,uBAAGH,KAAK,WAAU,2DAEpB,OACE,6BACGI,EACD,uBAAGE,OAAO,SAASC,IAAI,sBAAsBP,KAAK,+EAA+EH,UAAU,OAA3I,gBAA+J,yBAAKC,IAAI,kBAAkBC,IAAI,QAK9LS,EAAmB,kBACvB,6BACE,wBAAIC,GAAG,UAAS,0BAAMZ,UAAU,UAAhB,KAAhB,0BACA,iOACqM,uBAAGG,KAAK,eAAR,0BADrM,sFAGA,2JAC0H,uBAAGA,KAAK,6BAA6BM,OAAO,SAASC,IAAI,uBAAzD,cAD1H,yGAGA,4EACA,4FAAiE,0BAAMV,UAAU,OAAhB,kCACjE,yBAAKA,UAAU,eACb,6BAAK,0BAAMA,UAAU,MAAhB,sHASLa,EAAoB,kBACxB,6BACE,wBAAID,GAAG,eAAc,0BAAMZ,UAAU,UAAhB,KAArB,8BACA,uNAC2L,uBAAGG,KAAK,eAAR,0BAD3L,yDAGA,wDALF,iMAOE,0BAAMH,UAAU,QAAhB,yHAA6I,0BAAMA,UAAU,OAAhB,QAA7I,uDAPF,4NAQ4N,0BAAMA,UAAU,OAAhB,QAR5N,WASE,4BACA,yBAAKA,UAAU,eACb,6BACE,0BAAMA,UAAU,QAAhB,+dAkCFc,EAAmB,kBACvB,6BACE,wBAAIF,GAAG,cAAa,0BAAMZ,UAAU,UAAhB,KAApB,0BACA,2LAEE,6BAAM,6BAFR,kEAIE,0BAAMA,UAAU,QAAhB,4HAAgJ,0BAAMA,UAAU,OAAhB,cAAhJ,KAJF,yBAKwB,0BAAMA,UAAU,OAAhB,QALxB,SAK+D,0BAAMA,UAAU,OAAhB,WAL/D,OAUEe,EAAuB,kBAC3B,6BACE,wBAAIH,GAAG,kBAAiB,0BAAMZ,UAAU,UAAhB,KAAxB,6BACA,8MAGE,6BAAM,6BAHR,qBAIsB,0BAAMA,UAAU,OAAhB,qBAJtB,qDAMA,yBAAKA,UAAU,eACb,6BAAK,0BAAMA,UAAU,OAAhB,ukDAmDP,sGAC4E,uBAAGG,KAAK,qEAAqEO,IAAI,sBAAsBD,OAAO,UAA9G,6BAD5E,OAMEO,EAAe,kBACnB,6BACE,wBAAIJ,GAAG,SAAQ,0BAAMZ,UAAU,UAAhB,KAAf,0BACA,oHAEE,6BAFF,yCAG0C,0BAAMA,UAAU,OAAhB,cAH1C,mBAGiG,0BAAMA,UAAU,OAAhB,QAHjG,eAKA,yBAAKA,UAAU,eACb,6BAAK,0BAAMA,UAAU,OAAhB,+PAWP,oDAAyB,uBAAGG,KAAK,oBAAR,kCAAzB,sFAAyK,8BACzK,mFACyD,uBAAGA,KAAK,mCAAmCO,IAAI,sBAAsBD,OAAO,UAA5E,sCADzD,OAMWQ,EA5PF,WACX,IAcMlB,EAdoB,WACxB,IAD8B,EAEVT,EAAY4B,MADb,gFADW,mBAEvBb,EAFuB,KAElBC,EAFkB,KAK9B,MAAO,CAAED,IAFTA,EAAMA,EAAIc,QAAQ,OAAQ,IAEZb,OAAME,aADU,mBAATF,GAUAc,GAEvB,OACE,yBAAKR,GAAG,gBACN,kBAAC,IAAD,CAAQP,IAAI,wEAAwEgB,OAVhE,WACtBC,SAASC,iBAAiB,YAAYC,SAAQ,SAAAC,GAC5CC,OAAOC,KAAKC,eAAeH,SAS3B,kBAAC,EAAD,CAAQ1B,eAAgBA,IACxB,iCACE,sOAIA,gDACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,S,iBCbO8B,EAfC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAY1B,OAXAC,qBAAU,WACR,IAAMC,EAASC,IAAGC,MAAMJ,EAASK,OAAOC,MAAM,IAC9C,IAAKJ,EAAOK,MACV,OAAOC,QAAQC,KAAR,yJAMT7C,EAAO8C,eAAeR,EAAOK,MAAO/C,EAAc,KAAKmD,MAAK,SAAArC,GAAG,OAAIyB,EAAQa,KAAKtC,SAE3E,MCHHuC,EAAgB,CACpBC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,OAAQ,OACRC,WAAY,UAGCC,EAlBE,WACf,OACE,yBAAKlD,UAAU,YAAYmD,MAAOP,GAChC,mCACA,kDACA,2BAAG,kBAAC,IAAD,CAAMQ,GAAG,KAAT,yB,gCCiDMC,EAtDF,SAAC,GAAe,IAAbnC,EAAY,EAAZA,MAAY,EACAoC,mBAAS,MADT,mBACnB9D,EADmB,KACd+D,EADc,OAESD,oBAAS,GAFlB,mBAEnBE,EAFmB,KAETC,EAFS,KAIpB/D,EAAMwB,EAAMe,OAAOvC,IA+BzB,OAjBAsC,qBAAU,YACO,uCAAG,4BAAA0B,EAAA,sEAEK/D,EAAOgE,SAAS,OAAQjE,GAF7B,YAEVkE,EAFU,iDAMPL,EAAWK,IANJ,OASdrB,QAAQC,KAAK,2EACbiB,GAAe,GAVD,2CAAH,qDAafI,KACC,CAACnE,IAEAF,EAEA,yBAAK2D,MA1BU,CACdN,QAAQ,OACRE,eAAe,SACfE,WAAW,UAuBWjD,UAAU,SAC/B,yBAAKmD,MAjCO,CACdW,UAAU,SACVC,SAAS,OACTC,UAAU,OACVC,QAAQ,SA+BF,wBAAIjE,UAAU,oCAAqCkE,WAASC,OAAO3E,EAAI4E,KAAKC,QAE5E,yBAAKrE,UAAU,QAAQC,IAAKT,EAAI4E,KAAKE,MAAMjE,IAAKH,IAAKV,EAAI4E,KAAKE,MAAMpE,MAEpE,kBAAC,WAAD,CAAUqE,OAAQ/E,EAAI4E,KAAKI,YAAajF,aAAcA,MAIrDiE,EACF,kBAAC,EAAD,MAEF,M,OChDIiB,EAAmB,WAC5B,MAAO,CACLhF,KCP4B,uBC4EnBiF,EA3EE,WACb,IAAMC,EAAWC,cACXC,EAAOC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,KAAKG,SAC7ChD,qBAAU,WACN2C,GFqBC,SAAAA,GACLA,EAASF,GACT9E,EAAOsF,UAAU,YAAYvC,MAAK,SAACwC,GACjC3C,QAAQ4C,IAAID,EAAId,MAChBO,EAlBK,CACLlF,KCZ4B,qBDa5B2F,QAgB0BF,EAAId,UAC7BiB,OAAM,SAAAC,GACP/C,QAAQ4C,IAAIG,GACZX,EAf0B,SAAAW,GAC5B,MAAO,CACL7F,KClB4B,qBDmB5B2F,QAASE,GAYAC,CAAiBD,YE1B1B,IACF,IAAME,EAAcX,EAAKY,MAAQZ,EAAKY,KAAKC,KAAI,SAASrD,EAAOsD,GAK3D,GAAyB,SAArBtD,EAAMuD,WACR,OAAO1B,WAASK,OAAOlC,EAAMwD,QAAQC,UAAWvG,GAG3C,GAAyB,qBAArB8C,EAAMuD,WAAmC,CAClD,IAAMG,EAAiB1D,EAAM2D,OAAS3D,EAAM2D,MAAMN,KAAI,SAASO,EAAMC,GACnE,OACI,yBAAKC,IAAKR,EAAM,GAAI3F,UAAU,sCAC1B,yBAAKA,UAAU,aACX,yBAAKA,UAAU,6BACf,yBAAKA,UAAU,6BAA6BC,IAAKgG,EAAKG,UAAU/F,IAAKH,IAAI,OAG7E,yBAAKF,UAAU,SACf,yBAAKA,UAAU,oCACVkE,WAASK,OAAO0B,EAAKI,SAE1B,uBAAGrG,UAAU,yBACRiG,EAAKK,cAEV,yBAAKtG,UAAU,oCACVkE,WAASK,OAAO0B,EAAKM,WAG1B,yBAAKvG,UAAU,yBACVkE,WAASK,OAAO0B,EAAKO,eAMpC,OACE,yBAAKxG,UAAU,gBAAgBmG,IAAKR,GAClC,yBAAK3F,UAAU,yCACZkE,WAASC,OAAO9B,EAAMwD,QAAQY,mBAEhCV,GAML,OAAO,QAGb,OACI,yBAAK/F,UAAU,UACX,yBAAKA,UAAU,4DAA4DC,IAAK4E,EAAK6B,QAAU7B,EAAK6B,OAAOrG,MAC1G,yBAAKL,UAAU,qEACXkE,WAASK,OAAOM,EAAKR,MAAO9E,IAEhC,yBAAKS,UAAU,QACf,yBAAKA,UAAU,SACdwF,GAED,yBAAKxF,UAAU,aCyBb2G,EA3FH,SAAC,GAAoB,EAAlBzF,MAAkB,EAAZY,QAAa,IAAD,EACUwB,oBAAS,GADnB,mBACtBsD,EADsB,KACRC,EADQ,KAGvBC,EAAsB,WACxBD,GAAkBD,GAClBrE,QAAQ4C,IAAI,UAKVpD,EAAWgF,cACXC,EAAQlC,aAAY,SAAAC,GAAK,OAAIA,EAAMkC,IAAID,SACvCE,EAAepC,aAAY,SAAAC,GAAK,OAAIA,EAAMkC,IAAIC,gBAC9CC,EAAevC,cACfwC,EAAiBJ,EAAMtB,KAAI,SAAA2B,GAAC,OAAG,kBAAC,IAAD,CAAMC,QAAS,aAA0BnB,IAAKkB,EAAEE,KAAMvH,UAAS,6BAAwBkH,GAAgBA,EAAaK,OAASF,EAAEE,MAAQ,gBAAkBnE,GAAIiE,EAAEE,MAAOF,EAAEhD,UAC7MrC,qBAAU,WACNO,QAAQ4C,IAAIpD,EAASyF,UACrBL,ECdC,CACH1H,KCT6B,sBDU7B2F,QDY0CrD,EAASyF,aACnD,CAACzF,IAwBC,OACI,yBAAKoB,MALQ,CACbsE,OAAO,KAIezH,UAAU,6GACxB,yBAAKA,UAAU,qBACX,kBAAC,IAAD,CAAMA,UAAU,qBAAqBoD,GAAG,KACpC,yBAAKpD,UAAU,oCACf,yBAAKA,UAAU,sBAAsBC,IAAI,qDAAqDC,IAAI,aAClG,wBAAIF,UAAU,qBAAd,eAMR,yBAAKA,UAAU,0EACVoH,EACD,yBAAKpH,UAAU,uBACf,kBAAC,IAAD,CAAMA,UAAU,oCAAoCoD,GAAG,UAAvD,SACA,kBAAC,IAAD,CAAMpD,UAAU,2DAA2DoD,GAAG,WAA9E,aAIJ,yBAAKpD,UAAU,qCACX,4BAAQsH,QAASR,EAAqB9G,UAAU,+CAAhD,MAKD4G,GACC,yBAAM5G,UAAU,wGACZ,yBAAKA,UAAU,wBACX,4BAAQsH,QAASR,EAAqB9G,UAAU,+CAAhD,MAEJ,yBAAKA,UAAU,+BAEVoH,EACD,yBAAKpH,UAAU,2CACf,kBAAC,IAAD,CAAMA,UAAU,uDAAuDoD,GAAG,UAA1E,SACA,kBAAC,IAAD,CAAMpD,UAAU,sDAAsDoD,GAAG,WAAzE,gBGGjBsE,eAvDH,SAACC,GACX,IACMC,EADgB,gCAAgCC,KAAKvI,GAC5B,GACzBwI,EAAS,CACf,CACEP,KAAK,YACLQ,UAAU1E,GAEZ,CACEkE,KAAK,QACLQ,UAAU9G,GAEZ,CACEsG,KAAK,WACLQ,UAAUlG,GAEZ,CACE0F,KAAK,QACLQ,UAAUrD,IAIZ,OAEE,kBAAC,WAAD,KACE,kBAACsD,EAAA,OAAD,KACE,4BAAQC,OAAK,EAACC,OAAK,EAACjI,IAAG,kDAA6C2H,EAA7C,gBAGzB,kBAAC,IAAD,CAAeO,SAAQ,UAAKC,cAC1B,kBAAC,EAAQT,GACT,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUU,OAAK,EAACC,KAAK,IAAIlF,GAAG,UAC3B0E,EAAOpC,KAAI,SAAA2B,GAAC,OAAG,kBAAC,IAAD,CAAOlB,IAAKkB,EAAEE,KAAMc,OAAK,EAACd,KAAMF,EAAEE,KAAMQ,UAAWV,EAAEU,eACrE,kBAAC,IAAD,CAAOM,OAAK,EAACd,KAAK,aAAaQ,UAAW1E,IAc1C,kBAAC,IAAD,CAAO0E,UAAW7E,U,+lBC/E5B,IAAMqF,EAAe,CACjBC,SAAS,EACTxD,MAAO,GACPM,MAAO,IAqBImD,EAnBK,WAAgC,IAA/B1D,EAA8B,uDAAtBwD,EAAaG,EAAS,uCAC/C,OAAOA,EAAOjJ,MACV,INJ0B,qBMKtB,OAAO,EAAP,GAAWsF,EAAX,CAAiByD,SAAQ,EAAKlD,MAAM,KACxC,INJ0B,qBMKtB,OAAO,EAAP,GAAWP,EAAX,CAAiByD,SAAQ,EAAMlD,MAAMoD,EAAOtD,UAChD,INP0B,qBMQtB,OAAO,EAAP,GAAWL,EAAX,CAAiByD,SAAQ,EAAMlD,MAAM,GAAGN,MAAM0D,EAAOtD,UACzD,INdgB,WMgBhB,INfmB,cMiBnB,INhBmB,cMiBX,OAAO,EAAP,GAAWL,GACnB,QACI,OAAOA,I,yjBCpBnB,IAAMwD,EAAe,CACjBC,SAAS,EACTxB,MAAO,CACH,CACIO,KAAK,aACLlD,MAAM,OACNsE,KAAK,QAET,CACIpB,KAAK,SACLlD,MAAM,QACNsE,KAAK,QAET,CACIpB,KAAK,UACLlD,MAAM,SACNsE,KAAK,QAET,CACIpB,KAAK,QACLlD,MAAM,OACNsE,KAAK,SAGbzB,aAAa,KACb5B,MAAO,IAaIsD,EAXK,WAAgC,IAA/B7D,EAA8B,uDAAtBwD,EAAaG,EAAS,uCAC/C,OAAOA,EAAOjJ,MACV,IH9BkB,aG+Bd,OAAO,KAAIsF,EAAX,CAAiBmC,aAAawB,EAAOtD,UACzC,IH/B2B,sBGgCvB,OAAO,KAAIL,EAAX,CAAiBmC,aAAanC,EAAMiC,MAAM6B,MAAK,SAAAxB,GAAC,OAAEA,EAAEE,OAASmB,EAAOtD,aACxE,QACI,OAAO,KAAIL,K,QC9BjB+D,EAAcC,0BAAgB,CAChClE,KAAK4D,EACLxB,IAAI2B,IAGOI,EADDC,sBAAYH,EAAYI,8BAAoBC,0BAAgBC,OCE1EC,IAAS9E,OAEL,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUyE,MAASA,GACjB,kBAAC,EAAD,QAGN1H,SAASgI,eAAe,W","file":"static/js/main.a9548b82.chunk.js","sourcesContent":["import Prismic from 'prismic-javascript'\n\n// -- Prismic API endpoint\n// Determines which repository to query and fetch data from\nexport const apiEndpoint = 'https://React-sites.cdn.prismic.io/api/v2'\n\n// -- Access Token if the repository is not public\n// Generate a token in your dashboard and configure it here if your repository is private\nconst accessToken = ''\n\n// -- Link resolution rules\n// Manages the url links to internal Prismic documents\nexport const linkResolver = (doc) => {\n  if (doc.type === 'page') return `/page/${doc.uid}`\n  return '/'\n}\n\n// Client method to query documents from the Prismic repo\nexport const client = Prismic.client(apiEndpoint, { accessToken })\n","import React from 'react'\nimport { apiEndpoint } from '../prismic-configuration'\nimport Script from 'react-load-script'\n\nconst Help = () => {\n  const getRepositoryInfo = () => {\n    const repoRegexp = /^(https?:\\/\\/([-\\w]+)\\.[a-z]+\\.[a-z]+\\.(io|dev|test))\\/(api(\\/v2)?|graphql)$/\n    let [, url, name] = apiEndpoint.match(repoRegexp)\n    url = url.replace('.cdn', '')\n    const isConfigured = name !== 'your-repo-name'\n    return { url, name, isConfigured }\n  }\n\n  const onHighlightLoad = () => {\n    document.querySelectorAll('pre code').forEach(block => {\n      window.hljs.highlightBlock(block)\n    })\n  }\n\n  const repositoryInfo = getRepositoryInfo()\n\n  return (\n    <div id=\"prismic-help\">\n      <Script url=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js\" onLoad={onHighlightLoad} />\n      <Header repositoryInfo={repositoryInfo} />\n      <section>\n        <p>\n          This is a help page included in your project, it has a few useful links and example snippets to help you getting started.\n          You can access this any time by pointing your browser to localhost:3000/help.\n        </p>\n        <h2>Five more steps:</h2>\n        <BootstrapSection />\n        <CustomTypeSection />\n        <FirstPageSection />\n        <PageComponentSection />\n        <RouteSection />\n      </section>\n    </div>\n  )\n}\n\nconst Header = ({ repositoryInfo }) => (\n  <header>\n    <Navbar {...repositoryInfo} />\n    <div className=\"wrapper\">\n      <img src=\"images/rocket.svg\" alt=\"\" />\n      <h1>High five, you deserve it!</h1>\n      <p>Grab a well deserved cup of coffee, you're five steps away from creating a page with dynamic content.</p>\n    </div>\n    <div className=\"hero-curve\" />\n    <div className=\"flip-flap\">\n      <div className=\"flipper\">\n        <div className=\"guide\">\n          <ul>\n            <li><a href=\"#config\"><span className=\"number\">1</span>Bootstrap your project<img src=\"images/arrow.svg\" alt=\"\" /></a></li>\n            <li><a href=\"#custom-type\"><span className=\"number\">2</span>Setup a \"Page\" Custom Type<img src=\"images/arrow.svg\" alt=\"\" /></a></li>\n            <li><a href=\"#first-page\"><span className=\"number\">3</span>Create your first page<img src=\"images/arrow.svg\" alt=\"\" /></a></li>\n            <li><a href=\"#page-component\"><span className=\"number\">4</span>Create the Page component<img src=\"images/arrow.svg\" alt=\"\" /></a></li>\n            <li><a href=\"#route\"><span className=\"number\">5</span>Setup the page routing<img src=\"images/arrow.svg\" alt=\"\" /></a></li>\n          </ul>\n        </div>\n        <div className=\"gif\" />\n      </div>\n    </div>\n  </header>\n)\n\nconst Navbar = ({ url, name, isConfigured }) => {\n  const repoLink =\n    isConfigured ?\n    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\"><strong>Go to {name}</strong></a> :\n    <a href=\"#config\"><strong>Configure a repository</strong></a>\n\n  return (\n    <nav>\n      {repoLink}\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://prismic.io/docs/reactjs/getting-started/getting-started-from-scratch\" className=\"doc\" >Documentation<img src=\"images/open.svg\" alt=\"\" /></a>\n    </nav>\n  )\n}\n\nconst BootstrapSection = () => (\n  <div>\n    <h3 id=\"config\"><span className=\"number\">1</span>Bootstrap your project</h3>\n    <p>\n      Did you start this project with the help of our Command Line tool? If so, then your Prismic repository has already been created and setup with your first Custom Type. Feel free to jump ahead and <a href=\"#first-page\">Create your first page</a>. If that's not the case, don't worry! It's only a couple steps to get you set up.\n    </p>\n    <p>\n      If you haven't yet, create a Prismic content repository. A repository is where your website’s content will live. Simply <a href=\"https://prismic.io/#create\" target=\"_blank\" rel=\"noopener noreferrer\">create one</a> by choosing a repository name and a plan. We've got a variety of plans including our favorite, Free!\n    </p>\n    <h4>Add the repository URL to your configuration</h4>\n    <p>Replace the repository url in your prismic configuration with <code className=\"tag\">your-repo-name.cdn.prismic.io</code></p>\n    <div className=\"source-code\">\n      <pre><code className=\"js\">{\n`// In src/prismic-configuration.js\nexport const apiEndpoint: \"https://your-repo-name.cdn.prismic.io/api/v2\"\n`}\n      </code></pre>\n    </div>\n  </div>\n)\n\nconst CustomTypeSection = () => (\n  <div>\n    <h3 id=\"custom-type\"><span className=\"number\">2</span>Setup a \"Page\" Custom Type</h3>\n    <p>\n      Did you start this project with the help of our Command Line tool? If so, then your Prismic repository has already been setup with the required Custom Type. Feel free to jump ahead and <a href=\"#first-page\">Create your first page</a>. If not, follow these instructions to set things up.\n    </p>\n    <h4>Create a new Custom Type</h4>\n      Go to the repository backend you've just created. Navigate to the \"Custom Types\" section (icon on the left navbar) and create a new Repeatable Type. For this tutorial let's name it \"Page\".\n    <span className=\"note\">Before clicking on button \"Create new custom type\", make sure that the system automatically assigns this an API ID of <code className=\"tag\">page</code>, because we'll use it later for querying the page.</span>\n      Once the \"Page\" Custom Type is created, we have to define how we want to model it. Click on \"JSON editor\" (right sidebar) and paste the following JSON data into the Custom Type JSON editor. When you're done, hit the <code className=\"tag\">Save</code> button.\n    <p />\n    <div className=\"source-code\">\n      <pre>\n        <code className=\"json\">{\n`{\n\"Main\" : {\n  \"uid\" : {\n    \"type\" : \"UID\",\n    \"config\" : {\n      \"placeholder\" : \"UID\"\n    }\n  },\n  \"title\" : {\n    \"type\" : \"StructuredText\",\n    \"config\" : {\n      \"single\" : \"heading1\",\n      \"placeholder\" : \"Title...\"\n    }\n  },\n  \"description\" : {\n    \"type\" : \"StructuredText\",\n    \"config\" : {\n      \"multi\" : \"paragraph,em,strong,hyperlink\",\n      \"placeholder\" : \"Description...\"\n    }\n  },\n  \"image\" : {\n    \"type\" : \"Image\"\n  }\n}\n}`}\n        </code>\n      </pre>\n    </div>\n  </div>\n)\n\nconst FirstPageSection = () => (\n  <div>\n    <h3 id=\"first-page\"><span className=\"number\">3</span>Create your first page</h3>\n    <p>\n      The \"Page\" Custom Type you've just created contains a title, a paragraph, an image and a UID (unique identifier). Now it is time to fill in your first page!\n      <br /><br />\n      Go to \"Content,\" hit \"New,\" &amp; fill in the corresponding fields.\n      <span className=\"note\">Note the value you filled in the UID field, because it will be a part of the page URL. For this example enter the value, <code className=\"tag\">first-page</code>.</span>\n      When you're done, hit <code className=\"tag\">Save</code> then <code className=\"tag\">Publish</code>.\n    </p>\n  </div>\n)\n\nconst PageComponentSection = () => (\n  <div>\n    <h3 id=\"page-component\"><span className=\"number\">4</span>Create the Page component</h3>\n    <p>\n        You need to create the Page component and fetch your content.\n        We will query the page by its UID right before the component is mounted. Then we will update your component state.\n      <br /><br />\n        Create a new file <code className=\"tag\">src/pages/Page.js</code> and paste the following code into your new file.\n    </p>\n    <div className=\"source-code\">\n      <pre><code className=\"jsx\">{\n`// In src/pages/Page.js\nimport React, { useEffect, useState } from 'react'\nimport { RichText } from 'prismic-reactjs'\nimport { client, linkResolver } from '../prismic-configuration'\nimport NotFound from './NotFound'\n\nconst Page = ({ match }) => {\n  const [doc, setDocData] = useState(null)\n  const [notFound, toggleNotFound] = useState(false)\n\n  const uid = match.params.uid\n\n  // Get the page document from Prismic\n  useEffect(() => {\n    const fetchData = async () => {\n      // We are using the function to get a document by its UID\n      const result = await client.getByUID('page', uid)\n\n      if (result) {\n        // We use the State hook to save the document\n        return setDocData(result)\n      } else {\n        // Otherwise show an error message\n        console.warn('Page document not found. Make sure it exists in your Prismic repository')\n        toggleNotFound(true)\n      }\n    }\n    fetchData()\n  }, [uid]) // Skip the Effect hook if the UID hasn't changed\n\n  if (doc) {\n    return (\n      <div className=\"page\">\n        {/* This is how to get an image into your template */}\n        <img src={doc.data.image.url} alt={doc.data.image.alt} />\n        {/* This is how to render a Rich Text field as plain text */}\n        <h1>{RichText.asText(doc.data.title)}</h1>\n        {/* This is how to render a Rich Text field into your template as HTML */}\n        <RichText render={doc.data.description} linkResolver={linkResolver} />\n      </div>\n    )\n  } else if (notFound) {\n    return <NotFound />\n  }\n  return null\n}\n\nexport default Page`}\n      </code></pre>\n    </div>\n    <p>\n        To discover all the functions you can use to query your documents go to <a href=\"https://prismic.io/docs/reactjs/query-the-api/how-to-query-the-api\" rel=\"noopener noreferrer\" target=\"_blank\">the prismic documentation</a>.\n    </p>\n  </div>\n)\n\nconst RouteSection = () => (\n  <div>\n    <h3 id=\"route\"><span className=\"number\">5</span>Setup the page routing</h3>\n    <p>\n      Now all that's left to be done is to link your component to a URL by defining a route.\n      <br />\n        In the following example we'll link a <code className=\"tag\">/page/:uid</code> URL to the new <code className=\"tag\">Page</code> component.\n    </p>\n    <div className=\"source-code\">\n      <pre><code className=\"jsx\">{\n`// In src/App.js\n// Add this to list of imports at the top of the page\nimport Page from './pages/Page'\n\n// (...)\n\n// Add the following route in your Router component before the NotFound route\n<Route exact path='/page/:uid' component={Page} />`}\n      </code></pre>\n    </div>\n    <p>In your browser go to <a href=\"/page/first-page\">localhost:3000/page/first-page</a> and you're done! You've officially created a page that pulls content from Prismic.<br /></p>\n    <p>\n        To discover more about how to use Prismic, check out <a href=\"https://prismic.io/docs/reactjs/\" rel=\"noopener noreferrer\" target=\"_blank\">the Prismic React.js documentation</a>.\n    </p>\n  </div>\n)\n\nexport default Help\n","import { useEffect } from 'react'\nimport qs from 'qs'\nimport { client, linkResolver } from '../prismic-configuration'\n\n/**\n * Prismic preview endpoint component\n */\nconst Preview = ({ history, location }) => {\n  useEffect(() => {\n    const params = qs.parse(location.search.slice(1))\n    if (!params.token) {\n      return console.warn(`Unable to retrieve session token from provided url. \\n\n      Check https://prismic.io/docs/rest-api/beyond-the-api/the-preview-feature for more info`)\n    }\n\n    // Retrieve the correct URL for the document being previewed.\n    // Once fetched, redirect to the given url\n    client.previewSession(params.token, linkResolver, '/').then(url => history.push(url))\n  })\n  return null\n}\n\nexport default Preview\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\n/**\n * Page not found (404) componenet\n */\nconst NotFound = () => {\n  return (\n    <div className=\"not-found\" style={notFoundStyle}>\n      <h1>404</h1>\n      <h2>Document not found</h2>\n      <p><Link to=\"/\">Return to homepage</Link></p>\n    </div>\n  )\n}\n\nconst notFoundStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  height: '50vw',\n  alignItems: 'center'\n}\n\nexport default NotFound\n","// In src/pages/Page.js\nimport React, { useEffect, useState } from 'react'\nimport { RichText } from 'prismic-reactjs'\nimport { client, linkResolver } from '../prismic-configuration'\nimport NotFound from './NotFound'\n\nconst Page = ({ match }) => {\n  const [doc, setDocData] = useState(null)\n  const [notFound, toggleNotFound] = useState(false)\n\n  const uid = match.params.uid\n  const pageStyle = {\n      textAlign:'center',\n      fontSize:'30px',\n      fontStyle:'bold',\n      padding:'30px'\n    };\n   const container = {\n       display:'flex',\n       justifyContent:'center',\n       alignItems:'center'\n   }\n\n  // Get the page document from Prismic\n  useEffect(() => {\n    const fetchData = async () => {\n      // We are using the function to get a document by its UID\n      const result = await client.getByUID('page', uid)\n\n      if (result) {\n        // We use the State hook to save the document\n        return setDocData(result)\n      } else {\n        // Otherwise show an error message\n        console.warn('Page document not found. Make sure it exists in your Prismic repository')\n        toggleNotFound(true)\n      }\n    }\n    fetchData()\n  }, [uid]) // Skip the Effect hook if the UID hasn't changed\n\n  if (doc) {\n    return (\n      <div style={container} className=\"pt-30\">\n        <div style={pageStyle}>\n            {/* This is how to render a Rich Text field as plain text */}\n            <h1 className='text-4xl font-bold text-gray-900' >{RichText.asText(doc.data.title)}</h1>\n            {/* This is how to get an image into your template */}\n            <img className='py-10' src={doc.data.image.url} alt={doc.data.image.alt} />\n            {/* This is how to render a Rich Text field into your template as HTML */}\n            <RichText render={doc.data.description} linkResolver={linkResolver} />\n        </div>\n      </div>\n    )\n  } else if (notFound) {\n    return <NotFound />\n  }\n  return null\n}\n\nexport default Page","import * as actionConst from './actionConst'\nimport { client } from '../../prismic-configuration'\nexport const AddPost = post => {\n    return {\n        type : actionConst.POST_ADD,\n        payload:post\n    }\n}\n\nexport const fetchPostRequest = () => {\n    return {\n      type: actionConst.FETCH_POST_REQUEST\n    }\n  }\n  \nexport const fetchPostSuccess = list => {\n    return {\n      type: actionConst.FETCH_POST_SUCCESS,\n      payload: list\n    }\n  }\n  \nexport const fetchPostFailure = error => {\n    return {\n      type: actionConst.FETCH_POST_FAILURE,\n      payload: error\n    }\n  }\n\nexport const fetchPosts = ()=>{\n  return dispatch => {\n    dispatch(fetchPostRequest)\n    client.getSingle('homepage').then((res)=>{\n      console.log(res.data)\n      dispatch(fetchPostSuccess(res.data))\n    }).catch(error=>{\n      console.log(error)\n      dispatch(fetchPostFailure(error))\n    })\n  }\n}\n\n","export const POST_ADD = \"POST_ADD\"\nexport const POST_UPDATE = \"POST_UPDATE\"\nexport const POST_REMOVE = \"POST_REMOVE\"\n\nexport const FETCH_POST_REQUEST = 'FETCH_POST_REQUEST'\nexport const FETCH_POST_SUCCESS = 'FETCH_POST_SUCCESS'\nexport const FETCH_POST_FAILURE = 'FETCH_POST_FAILURE'","import React,{ useEffect} from 'react';\nimport { useDispatch, useSelector } from 'react-redux'\nimport {fetchPosts} from '../redux/post/action'\nimport {Link, RichText, Date  } from 'prismic-reactjs'\nimport {linkResolver } from '../prismic-configuration'\nconst HomePage = () => {\n    const dispatch = useDispatch()\n    const post = useSelector(state => state.post.posts)\n    useEffect(()=>{\n        dispatch(fetchPosts())\n        \n    },[])\n    const blogContent = post.body && post.body.map(function(slice, index){\n \n        // Render the right markup for the given slice type\n   \n        // Text Slice\n        if (slice.slice_type === 'text') {\n          return RichText.render(slice.primary.rich_text, linkResolver);\n   \n        // Image Gallery Slice\n        } else if (slice.slice_type === 'list_of_articles') {\n          const galleryContent = slice.items && slice.items.map(function(item, itemIndex){\n            return (\n                <div key={index+10} className=\"flex p-4 m-4 shadow-xl bg-gray-300\">\n                    <div className=\"w-2/5 p-2\">\n                        <div className=\"w-64 h-64 overflow-hidden\">\n                        <img className=\"h-full w-full object-cover\" src={item.thumbnail.url} alt=\"\"/>\n                        </div>\n                    </div>\n                    <div className=\"w-3/5\">\n                    <div className=\"gallery-title text-2xl font-bold\">\n                        {RichText.render(item.title1)}\n                    </div>\n                    <p className=\"text-xs text-gray-700\">\n                        {item.publish_date}\n                    </p>\n                    <div className=\"text-sm text-gary-600 font-light\">\n                        {RichText.render(item.subtitle)}\n                    </div>\n\n                    <div className=\"text-xs text-gray-900\">\n                        {RichText.render(item.content)}\n                    </div>\n                    </div>\n                </div>\n            )\n          });\n          return (\n            <div className=\"image-gallery\" key={index}>\n              <div className=\"gallery-title text-2xl font-bold px-4\">\n                {RichText.asText(slice.primary.title_of_section)}\n              </div>\n              {galleryContent}\n            </div>\n          );\n   \n        // Return null by default\n        } else {\n          return null;\n        } \n      });\n    return (\n        <div className=\"pt-30 \">\n            <img className='z-10 absolute inset-x-0 top-0  w-full h-30vh object-cover' src={post.slider && post.slider.url} />\n             <div className=\"z-100  w-full flex justify-center text-6xl font-bold h-50vh pt-46\">\n                {RichText.render(post.title, linkResolver)}\n             </div>\n             <div className=\"flex\">\n             <div className=\"w-2/3\">\n             {blogContent}\n             </div>\n             <div className=\"w-1/3\"></div>\n             </div>\n        </div>\n    );\n};\n\n\n\nexport default HomePage;\n","import React, { useEffect, useState } from 'react';\nimport {Link, useLocation} from 'react-router-dom';\nimport {useDispatch, useSelector} from 'react-redux'\nimport * as NavAction from '../redux/nav/action'\n\n\nconst Nav = ({ match,history })=>{\n    const [sideBarActive,setSideBarActive]=useState(false);\n    // const [doc, setDocData] = useState(null)\n    const handleToggleSideBar = ()=>{\n        setSideBarActive(!sideBarActive)\n        console.log('click')\n    }\n    const handleLinkClicked = (e)=>{\n        \n    }\n    const location = useLocation();\n    const links = useSelector(state => state.nav.links)\n    const selectedLink = useSelector(state => state.nav.selectedLink)\n    const linkDispatch = useDispatch()\n    const linksComponent = links.map(e=>(<Link onClick={()=>handleLinkClicked(e)} key={e.path} className={`hover:text-red-600 ${selectedLink && selectedLink.path === e.path && 'text-red-500'}`} to={e.path}>{e.title}</Link>))\n    useEffect(()=>{\n        console.log(location.pathname)\n        linkDispatch(NavAction.selectLinkByPath(location.pathname))\n    },[location])\n    // useEffect(()=>{\n    //     const fetchData = async () => {\n    //         // We are using the function to get a document by its UID\n    //         const result = await client.getByUID('page', 'home')\n    //         console.log(\"result\",result);\n    //         if (result) {\n    //           // We use the State hook to save the document\n    //           return setDocData(result)\n    //         } else {\n    //           // Otherwise show an error message\n    //           console.warn('Page document not found. Make sure it exists in your Prismic repository')\n              \n    //         }\n    //       }\n    //     //   fetchData()\n    // },[])\n    \n\n \n        const navStyle = {\n            zIndex:999\n        }\n\n        return ( \n            <div style={navStyle} className=\"fixed top-0 inset-x-0 bg-gray-200  shadow-lg font-semibold text-gray-900 flex p-4 sm:pl-10  bg-opacity-75\">\n                    <div className=\"flex items-center\">\n                        <Link className=\"hover:text-red-600\" to=\"/\">\n                            <div className=\"flex justify-center items-center\">\n                            <img className=\"mx-auto h-10 w-auto\" src=\"https://prismic.io/doc-assets/images/logo-dark.svg\" alt=\"Workflow\"/>\n                            <h2 className=\"px-4 text-red-600\">TheSeeed</h2>\n                            </div>\n                        </Link>\n                    </div>\n    \n                    {/* Destop screen */}\n                    <div className=\"hidden sm:flex flex-1  justify-end items-center px-4 space-x-4 text-sm\">\n                        {linksComponent}\n                        <div className=\"px-4 space-x-2 pl-8\">\n                        <Link className=\" rounded-lg p-2 px-4 text-red-600\" to=\"/login\">Login</Link>\n                        <Link className=\"rounded-lg p-2 px-4 border-solid border-2 border-red-600\" to=\"/signup\">Sign up</Link>\n                        </div>\n                    </div>\n                    {/* Mobile screen */}\n                    <div className=\"sm:hidden flex-1 flex justify-end\">\n                        <button onClick={handleToggleSideBar} className=\"px-4 p-2  rounded-lg shadow-lg text-red-600\">=</button>\n                       \n                    </div>\n                    {/* SIDE BAR */}\n                    {\n                       sideBarActive && (\n                        <div  className=\"transition  duration-500 transform ease-in-out fixed top-0 right-0 h-screen w-2/3 bg-white shadow-lg\">\n                            <div className=\"flex justify-end p-2\">\n                                <button onClick={handleToggleSideBar} className=\"px-4 p-2  rounded-lg shadow-lg text-red-600\">X</button>\n                            </div>\n                            <div className=\"flex flex-col p-4 space-y-2\">\n\n                                {linksComponent}\n                                <div className=\"p-2 flex flex-col space-y-2 text-center\">\n                                <Link className=\"bg-red-600 rounded-lg p-2 px-4 text-white  shadow-lg\" to=\"/login\">Login</Link>\n                                <Link className=\"bg-white rounded-lg p-2 px-4 text-red-600 shadow-lg\" to=\"/signup\">Sign up</Link>\n                                </div>\n                            </div>\n                        </div>\n                        )\n                        \n                    }\n            </div>\n        );\n    \n    \n};\n \nexport default Nav;\n\n\n","import * as actionConst from './actionConst'\nexport const selectLink = link => {\n    return {\n        type : actionConst.NAV_SELECT,\n        payload:link\n    }\n}\n\nexport const selectLinkByPath = path => {\n  return {\n      type : actionConst.NAV_SELECT_BY_PATHG,\n      payload:path\n  }\n}\n","export const NAV_SELECT = \"NAV_SELECT\"\nexport const NAV_SELECT_BY_PATHG = \"NAV_SELECT_BY_PATHG\"","import React, { Fragment } from 'react'\nimport { Helmet } from 'react-helmet'\nimport {\n  BrowserRouter,\n  Route,\n  Switch,\n  Redirect,\n  withRouter\n} from 'react-router-dom'\nimport { apiEndpoint } from './prismic-configuration'\nimport { \n  Help,\n  Preview,\n  NotFound,\n  Page,\n  HomePage\n} from './pages'\nimport Nav from './layout/nav';\n// import Home from './pages/home/home'\n// import Student from './pages/student/student';\n// import Teacher from './pages/teacher/teacher';\n// import TeacherDetail from './pages/teacher/teacherDetail';\n// import Footer from './layout/footer';\n// import Plan from './pages/plan/plan';\n// import History from './pages/History/History';\n// import Singin from './pages/Auth/singin';\n// import Signup from './pages/Auth/signup';\n// import TeacherDashboard from './pages/teacher/teacherDashboard';\n// import Live from './pages/student/live';\n/**\n * Main application componenet\n */\nconst App = (props) => {\n  const repoNameArray = /([^/]+)\\.cdn.prismic\\.io\\/api/.exec(apiEndpoint)\n  const repoName = repoNameArray[1]\n  const routes = [\n  {\n    path:'/page:uid',\n    component:Page\n  },\n  {\n    path:'/help',\n    component:Help\n  },\n  {\n    path:'/preview',\n    component:Preview\n  },\n  {\n    path:'/home',\n    component:HomePage\n  }\n]\n\n  return (\n    \n    <Fragment>\n      <Helmet>\n        <script async defer src={`//static.cdn.prismic.io/prismic.js?repo=${repoName}&new=true`} />\n      </Helmet>\n\n      <BrowserRouter basename={`${process.env.PUBLIC_URL}`}>\n        <Nav {...props}/>\n        <Switch>\n          <Redirect exact from='/' to='/home' />\n          {routes.map(e=>(<Route key={e.path} exact path={e.path} component={e.component} />))}\n          <Route exact path='/page/:uid' component={Page} />\n          {/* <Route path={\"/\"} exact render={(props)=><><Home {...props}/><Footer/></>}/>\n          <Route path={\"/student\"} render={(props)=><Student {...props}/>}/>\n          <Route path={\"/teacher\"} render={(props)=><TeacherDashboard {...props}/>}/>\n          <Route path={\"/teachers\"} render={(props)=><Teacher {...props}/>}/>\n          <Route path={\"/teacherdetail\"} render={(props)=><TeacherDetail {...props}/>}/>\n          <Route path={\"/live\"} render={(props)=><Live {...props}/>}/>\n          <Route path={\"/help\"} render={(props)=><Help {...props}/>}/>\n          <Route path={\"/plan\"} render={(props)=><Plan {...props}/>}/>\n          <Route path={\"/history\"} render={(props)=><History {...props}/>}/>\n          <Route path={\"/login\"} render={(props)=><Singin {...props}/>}/>\n          <Route path={\"/signup\"} render={(props)=><Signup {...props}/>}/> */}\n          {/* <Route exact path='/help' component={Help} />\n          <Route exact path='/preview' component={Preview} /> */}\n          <Route component={NotFound} />\n        </Switch>\n      </BrowserRouter>\n    </Fragment>\n  )\n}\n\nexport default withRouter(App)\n","import * as actionConst from './actionConst'\nconst initialState = {\n    loading: false,\n    posts: [],\n    error: ''\n  }\nconst PostReducer = (state = initialState,action)=>{\n    switch(action.type){\n        case actionConst.FETCH_POST_REQUEST:\n            return {...state,loading:true,error:''}\n        case actionConst.FETCH_POST_FAILURE:\n            return {...state,loading:false,error:action.payload}\n        case actionConst.FETCH_POST_SUCCESS:\n            return {...state,loading:false,error:'',posts:action.payload}\n        case actionConst.POST_ADD:\n            return {...state}\n        case actionConst.POST_UPDATE:\n            return {...state}\n        case actionConst.POST_REMOVE:\n                return {...state}\n        default:\n            return state;\n    }\n}\n\nexport default PostReducer","import * as actionConst from './actionConst'\nconst initialState = {\n    loading: false,\n    links: [\n        {\n            path:'/page/home',\n            title:'Home',\n            icon:'menu'\n        },\n        {\n            path:'/today',\n            title:'Today',\n            icon:'menu'\n        },\n        {\n            path:'/weekly',\n            title:'Weekly',\n            icon:'menu'\n        },\n        {\n            path:'/help',\n            title:'Help',\n            icon:'menu'\n        }\n    ],\n    selectedLink:null,\n    error: ''\n  }\n const NavReducer = (state = initialState,action)=>{\n    switch(action.type){\n        case actionConst.NAV_SELECT:\n            return {...state,selectedLink:action.payload}\n        case actionConst.NAV_SELECT_BY_PATHG:\n            return {...state,selectedLink:state.links.find(e=>e.path === action.payload)}\n        default:\n            return {...state};\n    }\n}\n\nexport default NavReducer;\n","import {createStore,combineReducers,applyMiddleware} from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport PostReducer from './post/reducer'\nimport NavReducer from './nav/reducer'\nimport thunkMiddleware from 'redux-thunk'\nconst mainReducer = combineReducers({\n    post:PostReducer,\n    nav:NavReducer\n})\nconst store = createStore(mainReducer,composeWithDevTools(applyMiddleware(thunkMiddleware)))\nexport default store;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport './assets/styles/main.css';\nimport { Provider } from 'react-redux'\nimport store from './redux'\nimport {\n  BrowserRouter,\n} from 'react-router-dom'\n\nReactDOM.render(\n  \n    <BrowserRouter>\n      <Provider store = {store}>\n        <App />\n    </Provider>\n    </BrowserRouter>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}